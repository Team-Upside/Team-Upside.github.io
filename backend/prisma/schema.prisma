datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider             = "prisma-client-py"
    interface            = "asyncio"
    recursive_type_depth = 5
    previewFeatures      = ["postgresqlExtensions"]
}

enum Gender {
    MALE
    FEMALE
    OTHERS
}

model User {
    id            String  @id @unique
    nickname      String  @unique
    birthdate     String
    gender        Gender
    mbti          String?
    interest      String?
    favorite_food String?
    profile       String?
    metadata      Json    @default("{}")

    created_at DateTime   @default(now())
    updated_at DateTime   @default(now()) @updatedAt
    cards      Card[]
    user_cards UserCard[]

    @@map("user")
}

model Restaurant {
    id        Int      @id @default(autoincrement())
    name      String
    longitude Float
    latitude  Float
    pictures  String[]

    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt
    cards      Card[]

    @@map("restaurant")
}

enum CardStatus {
    WAITING
    MATCHED
}

model Card {
    id            Int        @id @default(autoincrement())
    restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
    restaurant_id Int
    user          User       @relation(fields: [user_id], references: [id])
    user_id       String
    message       String
    status        CardStatus @default(WAITING)

    created_at DateTime   @default(now())
    updated_at DateTime   @default(now()) @updatedAt
    user_cards UserCard[]

    @@map("menu")
}

enum UserCardStatus {
    APPROVED
    IGNORED
}

model UserCard {
    user    User           @relation(fields: [user_id], references: [id])
    user_id String
    card    Card           @relation(fields: [card_id], references: [id])
    card_id Int
    status  UserCardStatus

    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    @@id([user_id, card_id])
    @@map("user_card")
}
