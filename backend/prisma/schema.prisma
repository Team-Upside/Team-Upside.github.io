datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider             = "prisma-client-py"
    interface            = "asyncio"
    recursive_type_depth = 5
    previewFeatures      = ["postgresqlExtensions"]
}

enum Gender {
    MALE
    FEMALE
    OTHERS
}

model User {
    id            String  @id @unique
    nickname      String  @unique
    birthdate     String
    gender        Gender
    mbti          String?
    interest      String?
    favorite_food String?
    profile       String?
    metadata      Json    @default("{}")

    created_at           DateTime    @default(now())
    updated_at           DateTime    @default(now()) @updatedAt
    cards                Card[]
    user_cards           UserCard[]
    chatrooms            ChatRoom[]
    chats                Chat[]
    gpt_advices          GPTAdvice[] @relation("user_to_opponent")
    opponent_gpt_advices GPTAdvice[] @relation("opponent_to_user")
    GPTAdvice            GPTAdvice[]

    @@map("user")
}

model Restaurant {
    id        Int      @id @default(autoincrement())
    name      String
    longitude Float
    latitude  Float
    pictures  String[]

    created_at DateTime   @default(now())
    updated_at DateTime   @default(now()) @updatedAt
    cards      Card[]
    chatrooms  ChatRoom[]

    @@map("restaurant")
}

enum CardStatus {
    WAITING
    MATCHED
    CANCELED
}

model Card {
    id            Int        @id @default(autoincrement())
    restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
    restaurant_id Int
    user          User       @relation(fields: [user_id], references: [id])
    user_id       String
    message       String
    status        CardStatus @default(WAITING)

    created_at DateTime   @default(now())
    updated_at DateTime   @default(now()) @updatedAt
    user_cards UserCard[]

    @@map("menu")
}

enum UserCardStatus {
    APPROVED
    IGNORED
}

model UserCard {
    user    User           @relation(fields: [user_id], references: [id])
    user_id String
    card    Card           @relation(fields: [card_id], references: [id])
    card_id Int
    status  UserCardStatus

    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    @@id([user_id, card_id])
    @@map("user_card")
}

model ChatRoom {
    id            Int        @id @default(autoincrement())
    restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
    restaurant_id Int
    users         User[]

    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt
    chats      Chat[]

    @@map("chat_room")
}

model Chat {
    id           Int      @id @default(autoincrement())
    chat_room    ChatRoom @relation(fields: [chat_room_id], references: [id])
    chat_room_id Int
    user         User     @relation(fields: [user_id], references: [id])
    user_id      String
    message      String
    read         Boolean  @default(false)

    created_at DateTime @default(now())

    @@map("chat")
}

model GPTAdvice {
    id               Int    @id @default(autoincrement())
    user             User   @relation(fields: [user_id], references: [id], name: "opponent_to_user")
    user_id          String
    opponent         User   @relation(fields: [opponent_user_id], references: [id], name: "user_to_opponent")
    opponent_user_id String
    message          String
    price            Float

    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt
    User       User?    @relation(fields: [userId], references: [id])
    userId     String?

    @@unique([user_id, opponent_user_id])
    @@map("gpt_advice")
}
